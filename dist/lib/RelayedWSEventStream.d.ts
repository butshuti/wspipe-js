import { WSEventStream } from './WSEventStream';
import { EventHandler } from './EventHandler';
import { WSEventStreamConfig } from './WSEventStreamConfig';
import { Peer } from './Peer';
import { StatusMonitor } from './StatusMonitor';
export declare class RelayedWSEventStream extends WSEventStream {
    static INSTANCE: RelayedWSEventStream;
    static CONFIG: WSEventStreamConfig;
    static HANDLERS: Map<string, EventHandler>;
    sessionState: string;
    localAddress: string;
    remoteAddress: string;
    lastConnectionURL: URL | null;
    localName: string;
    currentPeers: Set<string>;
    eventChannels: Set<string>;
    useTLS: boolean;
    pingTimer: number;
    peersChangeCallback: Function | null;
    constructor(config: WSEventStreamConfig);
    static initialize(config: WSEventStreamConfig): void;
    static getInstance(): RelayedWSEventStream;
    registerHandler(peerName: string, handler: EventHandler): RelayedWSEventStream;
    registerPeersChangeCallback(cbk: Function): void;
    withStatusMonitor(statusMonitor: StatusMonitor): RelayedWSEventStream;
    withConfig(config: WSEventStreamConfig): RelayedWSEventStream;
    withDstLabel(remoteAddress: string): RelayedWSEventStream;
    open(): void;
    close(): void;
    onConnected(selectedPeer: Peer): void;
    onDisconnected(selectedPeer: Peer): void;
    packMsg(msg: string, selectedPeer: Peer): string;
    wrapMsg(msg: string, dst: string): string;
    subscribeToSessionEvents(): void;
    unsubscribeFromSessionEvents(): void;
    startSession(selectedPeer: Peer, eventCode: string, reset: boolean): void;
    stop(selectedPeer: Peer, eventCode: string): void;
    queryConnectedPeers(): void;
    invitePeer(peer: string): void;
    joinPeerSession(peer: string): void;
    onPeersChanged(): void;
    registerPeer(peer: string): void;
    initiateWSSession(selectedPeer: Peer): void;
    private isValidSessionMessage;
    private isSensorLabel;
    parsePeerAddress(label: string): string;
    private savePeers;
    private handleEventMessage;
    broadcastEvent(evtData: string): void;
    getEventHandler(eventGroup: string): EventHandler | null;
}
